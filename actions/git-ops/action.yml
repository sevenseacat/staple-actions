name: Generate a new GitOps release.
description: "Runs git_ops and attempts to generate a new release"
outputs:
  app-name:
    description: "The OTP app name"
    value: ${{ steps.original-app-info.outputs.app_name }}
  initial-version:
    description: "The app version before git_ops was run"
    value: ${{ steps.original-app-info.outputs.app_version }}
  final-version:
    description: "The app version after git_ops was run"
    value: ${{ steps.new-app-info.outputs.app_version || steps.original-app-info.outputs.app_version }}
inputs:
  working-directory:
    description: "Change the working directory that the commands are run within"
    required: false
    default: "${{ github.workspace }}"
  version-tag-prefix:
    description: "The prefix to place before the version number in the tag name"
    required: false
    default: "v"
  mix-env:
    description: "The Mix environment to compile within"
    required: false
    default: "dev"
  git-token:
    required: false
    default: ${{ github.token }}
    description: "A Github access token for checking out git-based dependencies."
  use-cache:
    description: "Use caches?"
    required: false
    default: "true"
  cache-prefix:
    description: "Optional prefix for the cache key"
    required: false
    default: ""
  no-major:
    description: "Inhibit major version number changes"
    required: false
    default: "false"
  release-actor:
    description: "The actor to use for creating and pushing a release. This actor should own the `release_token`."
    required: false
    default: ${{ github.actor }}
  release-token:
    description: "The Github access token for creating a release (hint: using the actions token won't trigger other workflows)"
    required: false
    default: ${{ github.token }}
runs:
  using: "composite"
  steps:
    - uses: team-alembic/staple-actions/actions/mix-compile@main
      with:
        mix-env: ${{ inputs.mix-env }}
        git-token: ${{ inputs.git-token }}
        working-directory: ${{ inputs.working-directory }}
        use-cache: ${{ inputs.use-cache }}
        cache-prefix: ${{ inputs.cache-prefix }}
    - run: git config user.email '${{ github.repository }}+github-actions[bot]@users.noreply.github.com'
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - run: git config user.name 'github-actions'
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - run: mix git_ops.project_info --format github-actions
      env:
        MIX_ENV: ${{ inputs.mix-env }}
        HEX_HOME: ${{ runner.temp }}/.hex
        MIX_HOME: ${{ runner.temp }}/.mix
      name: Retrieving original app version.
      id: original-app-info
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - run: mix git_ops.release --yes || true
      if: ${{ inputs.no-major != 'true' }}
      env:
        MIX_ENV: ${{ inputs.mix-env }}
        HEX_HOME: ${{ runner.temp }}/.hex
        MIX_HOME: ${{ runner.temp }}/.mix
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - run: mix git_ops.release --yes --no-major || true
      if: ${{ inputs.no-major == 'true' }}
      env:
        MIX_ENV: ${{ inputs.mix-env }}
        HEX_HOME: ${{ runner.temp }}/.hex
        MIX_HOME: ${{ runner.temp }}/.mix
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - run: mix git_ops.project_info --format github-actions
      env:
        MIX_ENV: ${{ inputs.mix-env }}
        HEX_HOME: ${{ runner.temp }}/.hex
        MIX_HOME: ${{ runner.temp }}/.mix
      name: Checking for new app version.
      id: new-app-info
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - name: Pushing new tag
      if: ${{ steps.original-app-info.outputs.app_version != steps.new-app-info.outputs.app_version }}
      run: git push "https://${{ inputs.release_actor }}:${{ inputs.release_token }}@github.com/${{ github.repository }}" HEAD:${{ github.ref }} refs/tags/v${{ steps.new-app-info.outputs.app_version }}
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - name: Getting release message
      if: ${{ steps.original-app-info.outputs.app_version != steps.new-app-info.outputs.app_version }}
      run: |
        git tag -l --format='::set-output name={subject}::{%(contents:subject)}' v${{ steps.new-app-info.outputs.app_version }}
        git tag -l --format='::set-output name={body}::{%(contents:body)}' v${{ steps.new-app-info.outputs.app_version }}
      id: git-tag-message
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
    - name: Creating new Github release
      if: ${{ steps.original-app-info.outputs.app_version != steps.new-app-info.outputs.app_version }}
      id: create-release
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ inputs.release-token }}
        tag_name: ${{ inputs.version-tag-prefix }}${{ steps.new-app-info.outputs.app_version }}
        name: ${{ steps.git-tag-message.subject }}
        body: ${{ steps.git-tag-message.body }}
